#pragma rtGlobals=3		// Use modern global access method and strict wave access.

// functions to calculate the number of EPSPs preceding an AP
// data are loaded from .txt files (generated by export_spike_times.ipf)
// run as "preceding_spikes()"

// calculate number of preceding spikes given MF and GC spike train data
// inwave1 is the MF spike train, inwave2 the GC spike train 
function get_preceding_epsps(inwave1,inwave2)
	wave inwave1,inwave2

	wave pre = inwave1
	wave post = inwave2
	
	wavetransform zapNaNs pre
	wavetransform zapNaNs post
	
	variable numSpikes = numpnts(post)
	make/O/D/N=(numSpikes) pre_spikes
	variable i

	for(i = 0; i < numSpikes; i += 1)	
		variable t_1
		t_1 = (i) ? post [i - 1] : 0	
		Extract/FREE/O pre,epsps,(pre>t_1 && pre<post[i])
		pre_spikes[i] = numpnts(epsps)
	endfor	
	wavestats/Q pre_spikes
	
	return v_avg
end

// main function to load and analyse spike train data
function preceding_spikes()
	
	string wavePrefix = MultiLoad2Matrix()
	
	string theWaves = wavelist(wavePrefix+"*", ";", "")
	
	variable numWaves = itemsinlist(theWaves)
	Make/D/O/N=(numWaves) $(wavePrefix + "_Avg_N_epsp") /WAVE=avg_res
	Make/D/O/N=(numWaves) $(wavePrefix + "_SD_N_epsp") /WAVE=SD_res
	variable i
	for(i = 0; i < numWaves; i += 1)
		wave w = $stringfromlist(i, theWaves)
		variable runs = dimsize(w,1)
		make/FREE/D/N=(runs/2) epsps_temp
		variable j
		for(j = 0; j < runs/2; j += 1)
			MatrixOP/FREE/O preWave = col(w, j*2)
			MatrixOP/FREE/O postWave = col(w, j*2+1)	
			epsps_temp[j] = get_preceding_epsps(preWave,postWave)
		endfor
	wavestats/Q epsps_temp	
	avg_res[i] = V_avg
	SD_res[i]= V_sdev
	endfor

end

// load .txt files to 2D wave
static function/S MultiLoad2Matrix()
	multiopenfiles
	string text_string = S_filename
	Make/O/T/N=(ItemsInList(text_string, ";")) text_wave
	text_wave = StringFromList(p, text_string, ";")
	Make/O/T/N=(numpnts(text_wave)) Results

	variable nof
	For (nof=0;nof<=numpnts(text_wave)-1;nof+=1)
		LoadWave/A=import/M/D/J/K=0/Q  text_wave[nof]
    		Results[nof]=S_filename
    		wave import0
    		string NameOfNewWave = PossiblyQuoteName(removeending(S_filename,  ".txt"))
    		MatrixOP/O $NameOfNewWave = import0^t   
    		KillWaves/Z import0
	endfor
	KillWaves /Z text_wave 

	string prefix, name
	sscanf S_filename, "%[^_]%*[_]%s",prefix, name
	
	return prefix
End 
